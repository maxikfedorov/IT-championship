# docker-compose.yaml

version: '3.9'

services:
  # ===================== DASHBOARD BACKEND =====================
  dashboard_backend:
    build: ./src/dashboard_service/backend
    container_name: dashboard_backend
    restart: unless-stopped
    ports:
      - "${DASHBOARD_PORT}:8010"
    env_file:
      - .env.docker
    depends_on:
      - mongodb_cache
      - redis
      - ai_services
      - amp_generator
    networks:
      - ai_net

  # ===================== DASHBOARD FRONTEND =====================
  dashboard_frontend:
    build: ./src/dashboard_service/frontend
    container_name: dashboard_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env.docker  # ⭐ Единая система!
    depends_on:
      - dashboard_backend
    networks:
      - ai_net

  
  # ===================== AI Services =====================
  ai_services:
    build: ./src/ai-services
    container_name: ai_services
    restart: unless-stopped
    ports:
      - "${AI_PORT}:8000"
    env_file:
      - .env.docker   # ⬅️ здесь будут URL вида mongodb_ai, minio и т.д.
    depends_on:
      - mongodb_ai
      - minio
      - amp_generator
    networks:
      - ai_net      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ===================== Amp Generator =====================
  amp_generator:
    build: ./src/amp_generator
    container_name: amp_generator
    restart: unless-stopped
    ports:
      - "${AMP_PORT}:8005"
    env_file:
      - .env.docker
    networks:
      - ai_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ===================== MONGODB (AI Services) =====================
  mongodb_ai:
    image: mongo:7.0
    container_name: mongodb_ai
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_AI_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_AI_PASSWORD}
    ports:
      - "${MONGO_AI_PORT}:27017"
    volumes:
      - mongodb_ai_data:/data/db
    networks:
      - ai_net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ===================== MONGODB (Dashboard Cache) =====================
  mongodb_cache:
    image: mongo:7.0
    container_name: mongodb_cache
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_CACHE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_CACHE_PASSWORD}
    ports:
      - "${MONGO_CACHE_PORT}:27017"
    volumes:
      - mongodb_cache_data:/data/db
    networks:
      - ai_net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ===================== REDIS =====================
  redis:
    image: redis:7.2
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ===================== REDIS INSIGHT (UI) =====================
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    ports:
      - "5540:5540"
    networks:
      - ai_net
    depends_on:
      - redis

  # ===================== MINIO =====================
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - ai_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s


# ===================== VOLUMES =====================
volumes:
  mongodb_ai_data:
    driver: local
  mongodb_cache_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

# ===================== NETWORKS =====================
networks:
  ai_net:
    driver: bridge
